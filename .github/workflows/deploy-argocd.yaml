name: Deploy ArgoCD to EKS

on:
  push:
    branches: [ main ]
    paths:
      - 'argocd/**'
      - '.github/workflows/**' # 工作流文件本身
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'

jobs:
  deploy-argocd:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig for EKS cluster
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Create ArgoCD namespace
      run: kubectl apply -f argocd/namespace.yaml
    

    - name: Delete existing ArgoCD admin secret (if exists)
      run: |
        kubectl delete secret argocd-secret -n argocd || echo "Secret not found, skipping deletion"
    

    - name: Create ArgoCD admin secret
      run: |
        kubectl create secret generic argocd-secret \
          --namespace=argocd \
          --from-literal=admin.username="${{ secrets.ARGOCD_ADMIN_USERNAME }}" \
          --from-literal=admin.password="${{ secrets.ARGOCD_ADMIN_PASSWORD }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy ArgoCD RBAC
      run: kubectl apply -f argocd/rbac.yaml

    - name: Install ArgoCD CRDs
      run: |
        echo "Installing ArgoCD Custom Resource Definitions..."
        kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/application-crd.yaml
        kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/appproject-crd.yaml
        
        echo "Verifying CRD installation..."
        kubectl get crd | grep argoproj

    - name: Deploy ArgoCD ConfigMap
      run: kubectl apply -f argocd/configmap.yaml

    - name: Deploy Redis PVC
      run: |
        echo "Creating Redis Persistent Volume Claim..."
        kubectl apply -f argocd/redis-pvc.yaml
        sleep 10

    - name: Check PVC status
      run: |
        echo "=== PVC Status ==="
        kubectl get pvc -n argocd -o wide
        echo ""
        echo "=== PV Status ==="
        kubectl get pv -o wide
        echo ""
        echo "=== Storage Classes ==="
        kubectl get storageclass -o wide

    - name: Deploy Redis
      run: kubectl apply -f argocd/redis.yaml

    - name: Wait for Redis to be ready
      run: |
        echo "Waiting for Redis deployment to be available..."
        kubectl wait --for=condition=available deployment/argocd-redis -n argocd --timeout=180s

    - name: Check Redis status
      run: |
        echo "=== Redis Deployment Status ==="
        kubectl get deployment argocd-redis -n argocd -o wide
        echo ""
        echo "=== Redis Pods ==="
        kubectl get pods -n argocd -l app=argocd-redis
        echo ""
        echo "=== Redis Pod Logs ==="
        kubectl logs -n argocd -l app=argocd-redis --tail=50

    - name: Deploy ArgoCD Server
      run: |
        kubectl apply -f argocd/deployment.yaml
        kubectl apply -f argocd/service.yaml
        kubectl apply -f argocd/ingress.yaml

    - name: Check ArgoCD deployment status
      run: |
        echo "=== ArgoCD Deployment Status ==="
        kubectl get deployment argocd-server -n argocd -o wide
        echo ""
        echo "=== ArgoCD Pods ==="
        kubectl get pods -n argocd -l app=argocd-server
        echo ""
        echo "=== ArgoCD Pod Details ==="
        kubectl describe pods -n argocd -l app=argocd-server

    - name: Check ArgoCD pod logs for errors
      run: |
        echo "=== ArgoCD Pod Logs (last 50 lines) ==="
        kubectl logs -n argocd -l app=argocd-server --tail=50 || echo "No logs available yet"

    - name: Wait for ArgoCD Server to be ready (with retry)
      run: |
        echo "Waiting for ArgoCD Server deployment to be available..."
        # 使用重试机制
        for i in {1..30}; do
          if kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=30s 2>/dev/null; then
            echo "✅ ArgoCD Server is ready!"
            break
          else
            echo "⏳ ArgoCD Server not ready yet... Attempt $i/30"
            sleep 10
          fi
        done
        
        # 最终检查
        if kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=30s 2>/dev/null; then
          echo "✅ ArgoCD Server deployment completed successfully!"
        else
          echo "❌ ArgoCD Server deployment timeout after 300 seconds"
          echo "=== Final Deployment Status ==="
          kubectl get deployment argocd-server -n argocd -o yaml
          echo "=== Final Pod Status ==="
          kubectl get pods -n argocd -l app=argocd-server -o wide
          echo "=== Pod Events ==="
          kubectl describe pods -n argocd -l app=argocd-server | grep -A 20 Events
          exit 1
        fi

    - name: Verify all components
      run: |
        echo "=== All Deployments ==="
        kubectl get deployments -n argocd
        
        echo ""
        echo "=== All Pods ==="
        kubectl get pods -n argocd -o wide
        
        echo ""
        echo "=== All Services ==="
        kubectl get services -n argocd
        
        echo ""
        echo "=== All PVCs ==="
        kubectl get pvc -n argocd

    - name: Get ArgoCD access information
      run: |
        ALB_HOSTNAME=$(kubectl get ingress argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Still provisioning...")
        
        echo "🎉 ArgoCD Deployment Information:"
        echo ""
        echo "🔗 Access Information:"
        echo "   HTTP URL: http://$ALB_HOSTNAME"
        echo "   Username: ${{ secrets.ARGOCD_ADMIN_USERNAME }}"
        echo ""
        echo "📊 To check logs manually:"
        echo "   kubectl logs -n argocd -l app=argocd-server"
        echo "   kubectl describe pod -n argocd -l app=argocd-server"
