name: Deploy ArgoCD to EKS

on:
  push:
    branches: [ main ]
    paths:
      - 'argocd/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'

jobs:
  deploy-argocd:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig for EKS cluster
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Create ArgoCD namespace
      run: kubectl apply -f argocd/namespace.yaml

    - name: Clean up existing ArgoCD resources
      run: |
        # 删除可能存在的旧 secret
        kubectl delete secret argocd-secret -n argocd --ignore-not-found=true
        kubectl delete secret argocd-initial-admin-secret -n argocd --ignore-not-found=true
        echo "Cleaned up existing secrets"

    - name: Deploy ArgoCD RBAC
      run: kubectl apply -f argocd/rbac.yaml

    - name: Install ArgoCD CRDs
      run: |
        echo "Installing ArgoCD Custom Resource Definitions..."
        kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/application-crd.yaml
        kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/appproject-crd.yaml
        
        echo "Verifying CRD installation..."
        kubectl get crd | grep argoproj

    - name: Deploy ArgoCD ConfigMap
      run: kubectl apply -f argocd/configmap.yaml

    - name: Deploy Redis PVC
      run: |
        echo "Creating Redis Persistent Volume Claim..."
        kubectl apply -f argocd/redis-pvc.yaml
        sleep 10

    - name: Check PVC status
      run: |
        echo "=== PVC Status ==="
        kubectl get pvc -n argocd -o wide
        echo ""
        echo "=== PV Status ==="
        kubectl get pv -o wide
        echo ""
        echo "=== Storage Classes ==="
        kubectl get storageclass -o wide

    - name: Deploy Redis
      run: kubectl apply -f argocd/redis.yaml

    - name: Wait for Redis to be ready
      run: |
        echo "Waiting for Redis deployment to be available..."
        kubectl wait --for=condition=available deployment/argocd-redis -n argocd --timeout=180s

    - name: Check Redis status
      run: |
        echo "=== Redis Deployment Status ==="
        kubectl get deployment argocd-redis -n argocd -o wide
        echo ""
        echo "=== Redis Pods ==="
        kubectl get pods -n argocd -l app=argocd-redis
        echo ""
        echo "=== Redis Pod Logs ==="
        kubectl logs -n argocd -l app=argocd-redis --tail=50

    - name: Deploy ArgoCD Server
      run: |
        kubectl apply -f argocd/deployment.yaml
        kubectl apply -f argocd/service.yaml
        kubectl apply -f argocd/ingress.yaml

    - name: Wait for ArgoCD Server to be ready
      run: |
        echo "Waiting for ArgoCD Server deployment to be available..."
        for i in {1..30}; do
          if kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=30s 2>/dev/null; then
            echo "✅ ArgoCD Server is ready!"
            break
          else
            echo "⏳ ArgoCD Server not ready yet... Attempt $i/30"
            sleep 10
          fi
        done

    - name: Get initial admin password
      run: |
        echo "=== Getting initial admin password ==="
        
        # 等待 initial admin secret 生成
        for i in {1..20}; do
          if kubectl get secret argocd-initial-admin-secret -n argocd &>/dev/null; then
            echo "✅ Initial admin secret found"
            break
          else
            echo "⏳ Waiting for initial admin secret... Attempt $i/20"
            sleep 5
          fi
        done
        
        # 获取初始密码
        INITIAL_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d)
        
        if [ -n "$INITIAL_PASSWORD" ]; then
          echo "✅ Initial admin password retrieved"
          echo "Initial password: $INITIAL_PASSWORD"
        else
          echo "❌ Failed to get initial admin password"
          echo "Trying alternative method..."
          
          # 如果上面的方法失败，尝试直接从 pod 获取
          kubectl exec -n argocd deployment/argocd-server -- argocd admin initial-password -n argocd || echo "Alternative method also failed"
        fi

    - name: Install ArgoCD CLI for password reset
      run: |
        echo "Installing ArgoCD CLI..."
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
        echo "ArgoCD CLI version:"
        argocd version --client

    - name: Change admin password (optional)
      if: false  # 设置为 false，不自动修改密码，手动操作
      run: |
        echo "=== This step is disabled ==="
        echo "To change password manually, run:"
        echo "argocd login <argocd-server-url> --username admin --password <initial-password>"
        echo "argocd account update-password"

    - name: Get ArgoCD access information
      run: |
        # 获取服务信息
        ALB_HOSTNAME=$(kubectl get ingress argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Still provisioning...")
        CLUSTER_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.clusterIP}')
        NODE_PORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "N/A")
        
        # 获取初始密码
        INITIAL_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' 2>/dev/null | base64 -d || echo "Run: kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d")
        
        echo ""
        echo "🎉 ArgoCD Deployment Completed!"
        echo ""
        echo "🔐 Login Information:"
        echo "   Username: admin"
        echo "   Password: $INITIAL_PASSWORD"
        echo ""
        echo "🌐 Access URLs:"
        if [ "$ALB_HOSTNAME" != "Still provisioning..." ]; then
          echo "   Web UI: https://$ALB_HOSTNAME"
        fi
        echo "   Cluster IP: https://$CLUSTER_IP:443"
        if [ "$NODE_PORT" != "N/A" ]; then
          echo "   Node Port: https://<node-ip>:$NODE_PORT"
        fi
        echo ""
        echo "📝 To change password manually:"
        echo "   1. Login: argocd login <server-url> --username admin --password '$INITIAL_PASSWORD'"
        echo "   2. Change password: argocd account update-password"
        echo ""
        echo "🔧 Troubleshooting commands:"
        echo "   kubectl get pods -n argocd"
        echo "   kubectl logs -n argocd -l app=argocd-server"
        echo "   kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d"

    - name: Verify deployment
      run: |
        echo "=== Final Deployment Status ==="
        kubectl get deployments,services,pods -n argocd
        
        echo ""
        echo "=== ArgoCD Server Logs (last few lines) ==="
        kubectl logs -n argocd -l app=argocd-server --tail=20